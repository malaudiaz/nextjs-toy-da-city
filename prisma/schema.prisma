generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(uuid())
  name            String
  email           String?  @unique
  phone           String?
  clerkId         String   @unique
  role            String   @default("buyer")
  stripeAccountId String?  @unique
  onboardingUrl   String?
  reputation      Float?   @default(0)
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  lastSeen DateTime @default(now()) // Última vez que estuvo activo

  // Relaciones
  toysForSale     Toy[]         @relation("Seller")
  favoriteToys    FavoriteToy[]
  //purchaseHistory Transaction[] @relation("Buyer")
  //salesHistory    Transaction[] @relation("Seller")
  ordersAsBuyer   Order[]       @relation("Buyer")
  ordersAsSeller  Order[]       @relation("Seller")

  sentMessages      Message[]          @relation("MessageSender")
  receivedMessages  Message[]          @relation("MessageReceiver")
  pushSubscriptions PushSubscription[]

  @@map("users")
}

model Language {
  id           String        @id @default(uuid())
  code         String        @unique // "en", "es"
  name         String
  translations Translation[]
  createdAt    DateTime      @default(now())

  @@map("languages")
}

model Translation {
  id          String     @id @default(uuid())
  key         String
  value       String
  language    Language   @relation(fields: [languageId], references: [id])
  languageId  String
  category    Category?  @relation(fields: [categoryId], references: [id])
  categoryId  Int?
  condition   Condition? @relation(fields: [conditionId], references: [id])
  conditionId Int?
  status      Status?    @relation(fields: [statusId], references: [id])
  statusId    Int?
  createdAt   DateTime   @default(now())

  @@unique([languageId, key, categoryId, conditionId, statusId])
  @@map("translations")
}

model Category {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  userId       String
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  translations Translation[]
  toys         Toy[]

  @@map("categories")
}

model Status {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  userId       String
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  translations Translation[]
  toys         Toy[]
  //transactions Transaction[]

  @@map("statuses")
}

model Condition {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  description  String?
  userId       String
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  translations Translation[]
  toys         Toy[]

  @@map("conditions")
}

model Toy {
  id           String        @id @default(uuid())
  title        String
  description  String
  price        Float
  location     String
  categoryId   Int
  category     Category      @relation(fields: [categoryId], references: [id])
  statusId     Int
  status       Status        @relation(fields: [statusId], references: [id])
  conditionId  Int
  condition    Condition     @relation(fields: [conditionId], references: [id])
  sellerId     String
  seller       User          @relation("Seller", fields: [sellerId], references: [id])
  //transactions Transaction[]
  forSell      Boolean       @default(true)
  forGifts     Boolean       @default(true)
  forChanges   Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  isActive     Boolean       @default(true)
  media        Media[]
  favorites    FavoriteToy[]
  orderItems   OrderItem[]   // Relación inversa
  Message      Message[]     @relation("MessageToy")

  @@map("toys")
}

model Media {
  id      String   @id @default(uuid())
  fileUrl String
  type    FileType
  toyId   String
  toy     Toy      @relation(fields: [toyId], references: [id])

  @@map("media")
}

enum FileType {
  IMAGE
  VIDEO
}

model FavoriteToy {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  toyId     String
  toy       Toy      @relation(fields: [toyId], references: [id])
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())

  @@unique([userId, toyId], name: "unique_favorite")
  @@map("favorite_toys")
}

/* model Transaction {
  id            String   @id @default(uuid())
  toyId         String
  toy           Toy      @relation(fields: [toyId], references: [id])
  buyerId       String
  buyer         User     @relation("Buyer", fields: [buyerId], references: [id])
  sellerId      String
  seller        User     @relation("Seller", fields: [sellerId], references: [id])
  price         Float
  date          DateTime @default(now())
  statusId      Int
  status        Status   @relation(fields: [statusId], references: [id])
  paymentMethod String
  wasSold       Boolean  @default(true)
  wasGifts      Boolean  @default(true)
  wasChanged    Boolean  @default(true)
  orderId       String?  @unique // ✅ Aquí va @unique
  order         Order?   @relation(fields: [orderId], references: [id])

  @@map("transactions")
} */

// ✅ MODELO DE ÓRDENES (clave para el flujo de pago)
model Order {
  id              String      @id @default(uuid())
  cartId          String?     @unique
  paymentIntentId String      @unique @map("payment_intent_id")
  chargeId        String?     @map("charge_id")
  buyerId         String
  buyer           User        @relation("Buyer", fields: [buyerId], references: [id])
  sellerId        String
  seller          User        @relation("Seller", fields: [sellerId], references: [id])
  totalAmount     Int // en centavos
  status          OrderStatus @default(AWAITING_CONFIRMATION)
  createdAt       DateTime    @default(now())
  confirmedAt     DateTime?
  canceledAt      DateTime?
  transferredAt   DateTime?
  reembursedAt    DateTime?
  items           OrderItem[]

  // Relaciones inversas
  transfers   Transfer[] // Transferencias
  refunds     Refund[] // ✅ Añade esta línea
  //transaction Transaction?

  @@index([paymentIntentId])
  @@index([chargeId])
  @@index([buyerId])
  @@index([status])
  @@map("orders")
}

model OrderItem {
  id              String @id @default(uuid())
  orderId         String
  order           Order  @relation(fields: [orderId], references: [id])
  toyId           String
  toy             Toy    @relation(fields: [toyId], references: [id])
  priceAtPurchase Int // en centavos

  @@map("order_items")
}

enum OrderStatus {
  AWAITING_CONFIRMATION
  CONFIRMED
  CANCELED
  TRANSFERRED
  REEMBURSED
}

model Transfer {
  id               String   @id @default(uuid())
  orderId          String
  orderIdRel       Order    @relation(fields: [orderId], references: [id])
  sellerId         String
  amount           Int // en centavos
  stripeTransferId String   @unique @map("stripe_transfer_id")
  createdAt        DateTime @default(now())

  @@map("transfers")
}

// ✅ NUEVO: Modelo de Reembolso
model Refund {
  id             String   @id @default(uuid())
  orderId        String   @unique
  order          Order    @relation(fields: [orderId], references: [id])
  amount         Int // en centavos
  stripeRefundId String   @unique @map("stripe_refund_id")
  createdAt      DateTime @default(now())

  @@map("refunds")
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String
  createdAt  DateTime @default(now())
  toyId      String?

  // Relaciones
  sender   User @relation("MessageSender", fields: [senderId], references: [clerkId])
  receiver User @relation("MessageReceiver", fields: [receiverId], references: [clerkId])
  toy      Toy?  @relation("MessageToy", fields: [toyId], references: [id])

  @@map("messages")
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  keys      Json // { p256dh: string, auth: string }
  userId    String
  user      User     @relation(fields: [userId], references: [clerkId])
  createdAt DateTime @default(now())

  @@map("push_subscriptions")
}
