generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  toys        Toy[] 
}

model Status {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  toys        Toy[]
}

model Condition {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  toys        Toy[]
}

model Toy {
  id              String    @id @default(uuid())
  title           String
  description     String
  price           Float
  location        String
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      Int
  status          Status    @relation(fields: [statusId], references: [id])
  statusId        Int
  condition       Condition    @relation(fields: [conditionId], references: [id])
  conditionId     Int
  userId          String
  forSell         Boolean   @default(true)
  forGifts        Boolean   @default(true)
  forChanges      Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  isActive        Boolean   @default(true)
  media           Media[]   // Relaci√≥n uno a muchos con Media
  likes           ToyLikes[]  
  comments        ToyComments[]   
}

model Media {
  id        String    @id @default(uuid())
  fileUrl   String
  type      FileType
  toyId     String
  toy       Toy       @relation(fields: [toyId], references: [id])
}

enum FileType {
  IMAGE
  VIDEO
}

model ToyLikes {
  id          String    @id @default(uuid())
  toyId       String?
  toy         Toy?      @relation(fields: [toyId], references: [id])
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ToyComments {
  id          String    @id @default(uuid())
  toyId       String?
  toy         Toy?      @relation(fields: [toyId], references: [id])
  summary     String
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  likes       CommentsLikes[]
  comments    CommentsComments[]
}

model CommentsLikes {
  id          String    @id @default(uuid())
  commentId   String?
  comment     ToyComments?  @relation(fields: [commentId], references: [id])
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CommentsComments {
  id          String    @id @default(uuid())
  commentId   String?
  comment     ToyComments?  @relation(fields: [commentId], references: [id])
  summary     String
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}