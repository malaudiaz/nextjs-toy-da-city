generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  name            String
  email           String?       @unique
  phone           String?
  toysForSale     Toy[]         @relation("Seller")
  purchaseHistory Transaction[] @relation("Buyer")
  salesHistory    Transaction[] @relation("Seller") 
  cart            Cart? 
  reputation      Float?        @default(0)
  isActive        Boolean       @default(true)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Language {
  id           String       @id @default(uuid())
  code         String       @unique // e.g.: "en", "es", "fr"
  name         String
  translations Translation[]
  createdAt    DateTime     @default(now())
}

model Translation {
  id          String      @id @default(uuid())
  key         String      // Field to translate
  value       String      // Translated text
  
  language    Language    @relation(fields: [languageId], references: [id])
  languageId  String

  category    Category?   @relation(fields: [categoryId], references: [id])
  categoryId  Int?

  condition   Condition?  @relation(fields: [conditionId], references: [id])
  conditionId Int?

  status      Status?     @relation(fields: [statusId], references: [id])
  statusId    Int?

  createdAt   DateTime    @default(now())

  @@unique([languageId, key, categoryId, conditionId, statusId])

}

model Category {
  id           Int     @id @default(autoincrement())
  name         String  @unique
  description  String?
  userId       String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  translations Translation[]
  toys         Toy[] 
}

model Status {
  id           Int     @id @default(autoincrement())
  name         String  @unique
  description  String?
  userId       String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  translations Translation[]
  toys         Toy[]
  transactions Transaction[]

}

model Condition {
  id           Int     @id @default(autoincrement())
  name         String  @unique
  description  String?
  userId       String
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  translations Translation[]
  toys         Toy[]
}


model Toy {
  id              String      @id @default(uuid())
  title           String
  description     String
  price           Float
  location        String

  category        Category    @relation(fields: [categoryId], references: [id])
  categoryId      Int

  status          Status      @relation(fields: [statusId], references: [id])
  statusId        Int

  condition       Condition   @relation(fields: [conditionId], references: [id])
  conditionId     Int
  
  seller          User        @relation("Seller", fields: [sellerId], references: [id])
  sellerId        String

  transactions    Transaction[]
  cartItems       CartItem[] 

  forSell         Boolean     @default(true)
  forGifts        Boolean     @default(true)
  forChanges      Boolean     @default(true)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  isActive        Boolean     @default(true)
  media           Media[]     // Relación uno a muchos con Media
  likes           ToyLikes[]  
  comments        ToyComments[]   
}

model Media {
  id        String    @id @default(uuid())
  fileUrl   String
  type      FileType
  toyId     String
  toy       Toy       @relation(fields: [toyId], references: [id])
}

enum FileType {
  IMAGE
  VIDEO
}

model ToyLikes {
  id          String    @id @default(uuid())
  toyId       String?
  toy         Toy?      @relation(fields: [toyId], references: [id])
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ToyComments {
  id          String    @id @default(uuid())
  toyId       String?
  toy         Toy?      @relation(fields: [toyId], references: [id])
  summary     String
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  likes       CommentsLikes[]
  comments    CommentsComments[]
}

model CommentsLikes {
  id          String    @id @default(uuid())
  commentId   String?
  comment     ToyComments?  @relation(fields: [commentId], references: [id])
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CommentsComments {
  id          String    @id @default(uuid())
  commentId   String?
  comment     ToyComments?  @relation(fields: [commentId], references: [id])
  summary     String
  userId      String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Transaction {
  id            String    @id @default(uuid())
  toy           Toy       @relation(fields: [toyId], references: [id])
  toyId         String
  buyer         User      @relation("Buyer", fields: [buyerId], references: [id])
  buyerId       String
  seller        User      @relation("Seller", fields: [sellerId], references: [id]) 
  sellerId      String    
  price         Float
  date          DateTime  @default(now())
  status        Status      @relation(fields: [statusId], references: [id])
  statusId      Int
  paymentMethod String

  wasSold       Boolean     @default(true)
  wasGifts      Boolean     @default(true)
  wasChanged    Boolean     @default(true)

}

model Cart {
  id          String    @id @default(uuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  items       CartItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([userId]) // Un usuario tiene un solo carrito activo
}

model CartItem {
  id          String    @id @default(uuid())
  cartId      String
  cart        Cart      @relation(fields: [cartId], references: [id])
  toyId       String
  toy         Toy       @relation(fields: [toyId], references: [id])
  quantity    Int       @default(1)
  addedAt     DateTime  @default(now())
  selected    Boolean   @default(true) // Para seleccionar qué items comprar

  // Precio en el momento de agregar al carrito (para evitar cambios)
  priceAtAddition Float  

  @@unique([cartId, toyId]) // Un juguete solo puede aparecer una vez en el carrito
}
